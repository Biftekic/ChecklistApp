{
  "session_id": "2b39b9d8-981e-4e0e-a16b-5036014b54f1",
  "transcript_path": "/home/tinpavlic1/.claude/projects/-home-tinpavlic1-claude-projects-ChecklistApp/2b39b9d8-981e-4e0e-a16b-5036014b54f1.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Edit",
  "tool_input": {
    "file_path": "/home/tinpavlic1/claude-projects/ChecklistApp/lib/stores/template-store.ts",
    "old_string": "",
    "new_string": "// Zustand store for template management\n\nimport { create } from 'zustand';\nimport { \n  ChecklistTemplate, \n  TemplateRoom, \n  TemplateTask,\n  TemplateSelectionState,\n  GeneratedChecklist \n} from '@/lib/types/template';\nimport { templateEngine } from '@/lib/services/template-engine';\n\ninterface TemplateStore extends TemplateSelectionState {\n  // State\n  templates: ChecklistTemplate[];\n  generatedChecklist: GeneratedChecklist | null;\n  isLoading: boolean;\n  \n  // Actions\n  loadTemplates: () => Promise<void>;\n  selectTemplate: (template: ChecklistTemplate) => void;\n  toggleRoom: (roomId: string) => void;\n  toggleTask: (roomId: string, taskId: string) => void;\n  editTask: (taskId: string, updates: Partial<TemplateTask>) => void;\n  addCustomTask: (roomId: string, task: Omit<TemplateTask, 'id' | 'isCustom'>) => void;\n  removeCustomTask: (roomId: string, taskId: string) => void;\n  generateChecklist: () => GeneratedChecklist;\n  resetSelection: () => void;\n  selectAllTasks: (roomId: string) => void;\n  deselectAllTasks: (roomId: string) => void;\n}\n\nconst initialState: TemplateSelectionState = {\n  selectedTemplate: null,\n  selectedRooms: [],\n  selectedTasks: {},\n  customTasks: {},\n  editedTasks: {}\n};\n\nexport const useTemplateStore = create<TemplateStore>((set, get) => ({\n  // Initial state\n  ...initialState,\n  templates: [],\n  generatedChecklist: null,\n  isLoading: false,\n\n  // Load templates\n  loadTemplates: async () => {\n    set({ isLoading: true });\n    try {\n      await templateEngine.loadTemplates();\n      const templates = templateEngine.getAllTemplates();\n      set({ templates, isLoading: false });\n    } catch (error) {\n      console.error('Failed to load templates:', error);\n      set({ isLoading: false });\n    }\n  },\n\n  // Select a template\n  selectTemplate: (template) => {\n    set({ \n      selectedTemplate: template,\n      selectedRooms: [],\n      selectedTasks: {},\n      customTasks: {},\n      editedTasks: {}\n    });\n  },\n\n  // Toggle room selection\n  toggleRoom: (roomId) => {\n    const state = get();\n    const isSelected = state.selectedRooms.includes(roomId);\n    \n    if (isSelected) {\n      // Remove room and its tasks\n      const newSelectedRooms = state.selectedRooms.filter(id => id !== roomId);\n      const newSelectedTasks = { ...state.selectedTasks };\n      delete newSelectedTasks[roomId];\n      \n      set({ \n        selectedRooms: newSelectedRooms,\n        selectedTasks: newSelectedTasks\n      });\n    } else {\n      // Add room and select default tasks\n      const room = state.selectedTemplate?.categories\n        .flatMap(c => c.rooms)\n        .find(r => r.id === roomId);\n      \n      if (room) {\n        const defaultSelectedTasks = room.tasks\n          .filter(t => t.isSelected !== false)\n          .map(t => t.id);\n        \n        set({\n          selectedRooms: [...state.selectedRooms, roomId],\n          selectedTasks: {\n            ...state.selectedTasks,\n            [roomId]: defaultSelectedTasks\n          }\n        });\n      }\n    }\n  },\n\n  // Toggle task selection\n  toggleTask: (roomId, taskId) => {\n    const state = get();\n    const roomTasks = state.selectedTasks[roomId] || [];\n    const isSelected = roomTasks.includes(taskId);\n    \n    if (isSelected) {\n      set({\n        selectedTasks: {\n          ...state.selectedTasks,\n          [roomId]: roomTasks.filter(id => id !== taskId)\n        }\n      });\n    } else {\n      set({\n        selectedTasks: {\n          ...state.selectedTasks,\n          [roomId]: [...roomTasks, taskId]\n        }\n      });\n    }\n  },\n\n  // Edit task details\n  editTask: (taskId, updates) => {\n    set(state => ({\n      editedTasks: {\n        ...state.editedTasks,\n        [taskId]: {\n          ...state.editedTasks[taskId],\n          ...updates\n        }\n      }\n    }));\n  },\n\n  // Add custom task\n  addCustomTask: (roomId, task) => {\n    const customTask = templateEngine.addCustomTask(roomId, task);\n    const state = get();\n    \n    set({\n      customTasks: {\n        ...state.customTasks,\n        [roomId]: [...(state.customTasks[roomId] || []), customTask]\n      }\n    });\n  },\n\n  // Remove custom task\n  removeCustomTask: (roomId, taskId) => {\n    const state = get();\n    const roomCustomTasks = state.customTasks[roomId] || [];\n    \n    set({\n      customTasks: {\n        ...state.customTasks,\n        [roomId]: roomCustomTasks.filter(t => t.id !== taskId)\n      }\n    });\n  },\n\n  // Generate checklist\n  generateChecklist: () => {\n    const state = get();\n    const checklist = templateEngine.generateChecklist(state);\n    set({ generatedChecklist: checklist });\n    return checklist;\n  },\n\n  // Reset selection\n  resetSelection: () => {\n    set({\n      ...initialState,\n      generatedChecklist: null\n    });\n  },\n\n  // Select all tasks in a room\n  selectAllTasks: (roomId) => {\n    const state = get();\n    const room = state.selectedTemplate?.categories\n      .flatMap(c => c.rooms)\n      .find(r => r.id === roomId);\n    \n    if (room) {\n      const allTaskIds = room.tasks.map(t => t.id);\n      set({\n        selectedTasks: {\n          ...state.selectedTasks,\n          [roomId]: allTaskIds\n        }\n      });\n    }\n  },\n\n  // Deselect all tasks in a room\n  deselectAllTasks: (roomId) => {\n    set(state => ({\n      selectedTasks: {\n        ...state.selectedTasks,\n        [roomId]: []\n      }\n    }));\n  }\n}));"
  }
}