{
  "session_id": "5bb3c4d2-998c-4b04-8585-7f912e546b79",
  "transcript_path": "/home/tinpavlic1/.claude/projects/-home-tinpavlic1-claude-projects-ChecklistApp/5bb3c4d2-998c-4b04-8585-7f912e546b79.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/home/tinpavlic1/claude-projects/ChecklistApp/lib/services/__tests__/template-engine.test.ts",
    "content": "import { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { TemplateEngine } from '../template-engine';\nimport type { Template } from '@/lib/types/checklist';\n\ndescribe('Template Engine', () => {\n  let engine: TemplateEngine;\n\n  beforeEach(() => {\n    engine = new TemplateEngine();\n    vi.clearAllMocks();\n  });\n\n  describe('Template Loading', () => {\n    it('should load all industry templates', async () => {\n      const templates = await engine.loadIndustryTemplates();\n      \n      expect(templates.length).toBeGreaterThanOrEqual(15);\n      expect(templates).toContainEqual(\n        expect.objectContaining({\n          industry: 'residential',\n          serviceType: 'standard-cleaning'\n        })\n      );\n    });\n\n    it('should load templates for specific industry', async () => {\n      const templates = await engine.loadTemplatesByIndustry('hotel');\n      \n      expect(templates.length).toBeGreaterThan(0);\n      templates.forEach(template => {\n        expect(template.industry).toBe('hotel');\n      });\n    });\n\n    it('should categorize templates by industry', async () => {\n      const categorized = await engine.getCategorizedTemplates();\n      \n      expect(Object.keys(categorized)).toContain('residential');\n      expect(Object.keys(categorized)).toContain('commercial');\n      expect(Object.keys(categorized)).toContain('hotel');\n      expect(Object.keys(categorized)).toContain('healthcare');\n      expect(Object.keys(categorized)).toContain('restaurant');\n    });\n  });\n\n  describe('Template Customization', () => {\n    it('should allow full template customization', async () => {\n      const template: Template = {\n        id: 'test-1',\n        name: 'Test Template',\n        serviceType: 'standard-cleaning',\n        propertyType: 'residential',\n        items: [\n          { id: '1', text: 'Task 1', category: 'kitchen', completed: false }\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDefault: false\n      };\n\n      const customized = await engine.customizeTemplate(template, {\n        addItems: [\n          { text: 'Custom Task', category: 'bathroom', estimatedTime: 10 }\n        ],\n        removeItemIds: [],\n        updateItems: [\n          { id: '1', text: 'Updated Task 1', estimatedTime: 15 }\n        ],\n        reorderItems: ['1']\n      });\n\n      expect(customized.items).toHaveLength(2);\n      expect(customized.items[0].text).toBe('Updated Task 1');\n      expect(customized.items[0].estimatedTime).toBe(15);\n      expect(customized.items[1].text).toBe('Custom Task');\n    });\n\n    it('should support task reordering', async () => {\n      const template: Template = {\n        id: 'test-2',\n        name: 'Test Template',\n        serviceType: 'standard-cleaning',\n        propertyType: 'residential',\n        items: [\n          { id: '1', text: 'Task 1', category: 'kitchen', completed: false },\n          { id: '2', text: 'Task 2', category: 'bathroom', completed: false },\n          { id: '3', text: 'Task 3', category: 'bedroom', completed: false }\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDefault: false\n      };\n\n      const reordered = await engine.reorderTasks(template, ['3', '1', '2']);\n      \n      expect(reordered.items[0].id).toBe('3');\n      expect(reordered.items[1].id).toBe('1');\n      expect(reordered.items[2].id).toBe('2');\n    });\n  });\n\n  describe('Template Validation', () => {\n    it('should validate template structure', () => {\n      const validTemplate: Template = {\n        id: 'valid-1',\n        name: 'Valid Template',\n        serviceType: 'standard-cleaning',\n        propertyType: 'residential',\n        items: [\n          { id: '1', text: 'Task 1', category: 'kitchen', completed: false }\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDefault: false\n      };\n\n      const validation = engine.validateTemplate(validTemplate);\n      expect(validation.isValid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n\n    it('should detect invalid template structure', () => {\n      const invalidTemplate = {\n        id: 'invalid-1',\n        name: '',\n        serviceType: 'invalid-type',\n        items: []\n      } as any;\n\n      const validation = engine.validateTemplate(invalidTemplate);\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors).toContain('Template name is required');\n      expect(validation.errors).toContain('Invalid service type');\n      expect(validation.errors).toContain('Template must have at least one task');\n    });\n  });\n\n  describe('Template Merging with Q&A', () => {\n    it('should merge Q&A results with templates', async () => {\n      const template: Template = {\n        id: 'merge-1',\n        name: 'Base Template',\n        serviceType: 'standard-cleaning',\n        propertyType: 'residential',\n        items: [\n          { id: '1', text: 'Clean kitchen', category: 'kitchen', completed: false },\n          { id: '2', text: 'Clean bathroom', category: 'bathroom', completed: false }\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDefault: false\n      };\n\n      const qaAnswers = {\n        includeDeepCleaning: true,\n        rooms: ['kitchen', 'bathroom', 'bedroom'],\n        priorityAreas: ['kitchen'],\n        estimatedSize: 'large'\n      };\n\n      const merged = await engine.mergeWithQAResults(template, qaAnswers);\n      \n      // Should add deep cleaning tasks\n      expect(merged.items).toContainEqual(\n        expect.objectContaining({\n          text: expect.stringContaining('Deep clean'),\n          category: 'kitchen'\n        })\n      );\n      \n      // Should add bedroom tasks since it was selected\n      expect(merged.items).toContainEqual(\n        expect.objectContaining({\n          category: 'bedroom'\n        })\n      );\n      \n      // Should mark priority areas\n      const kitchenTasks = merged.items.filter(item => item.category === 'kitchen');\n      expect(kitchenTasks.some(task => task.priority === 'high')).toBe(true);\n    });\n  });\n\n  describe('Template Versioning', () => {\n    it('should support template versioning', async () => {\n      const template: Template = {\n        id: 'ver-1',\n        name: 'Versioned Template',\n        serviceType: 'standard-cleaning',\n        propertyType: 'residential',\n        items: [\n          { id: '1', text: 'Task 1', category: 'kitchen', completed: false }\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDefault: false,\n        version: 1\n      };\n\n      const newVersion = await engine.createNewVersion(template, {\n        addItems: [\n          { text: 'New Task', category: 'bathroom' }\n        ]\n      });\n\n      expect(newVersion.version).toBe(2);\n      expect(newVersion.items).toHaveLength(2);\n      expect(newVersion.parentId).toBe('ver-1');\n    });\n  });\n\n  describe('Template Import/Export', () => {\n    it('should export template to JSON', () => {\n      const template: Template = {\n        id: 'exp-1',\n        name: 'Export Template',\n        serviceType: 'standard-cleaning',\n        propertyType: 'residential',\n        items: [\n          { id: '1', text: 'Task 1', category: 'kitchen', completed: false }\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDefault: false\n      };\n\n      const exported = engine.exportTemplate(template);\n      const parsed = JSON.parse(exported);\n      \n      expect(parsed.name).toBe('Export Template');\n      expect(parsed.items).toHaveLength(1);\n      expect(parsed.exportedAt).toBeDefined();\n    });\n\n    it('should import template from JSON', () => {\n      const jsonTemplate = JSON.stringify({\n        name: 'Imported Template',\n        serviceType: 'deep-cleaning',\n        propertyType: 'commercial',\n        items: [\n          { text: 'Imported Task', category: 'office' }\n        ]\n      });\n\n      const imported = engine.importTemplate(jsonTemplate);\n      \n      expect(imported.name).toBe('Imported Template');\n      expect(imported.serviceType).toBe('deep-cleaning');\n      expect(imported.items[0].text).toBe('Imported Task');\n      expect(imported.id).toBeDefined(); // Should generate new ID\n    });\n  });\n});"
  }
}